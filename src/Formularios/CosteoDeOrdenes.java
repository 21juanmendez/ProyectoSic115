/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Formularios;

import Conexiones.ConexionDB;
import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author juann
 */
public class CosteoDeOrdenes extends javax.swing.JPanel {

    /**
     * Creates new form CosteoDeOrdenes
     */
    public CosteoDeOrdenes() {
        initComponents();
        tablemodeloCostosDirectos();
        valoresImporte();
        tablemodeloObra();
        valoresObra();
        tablemodeloImportes();
        tablemodeloOrdenProduccion();
    }

    public void valoresImporte() {
        txtImporte.setText("");
        txtConcepto.setText("");
        btnModificarImporte.setEnabled(false);
        btnEliminarImporte.setEnabled(false);
        btnAgregarImporte.setEnabled(true);
        lblIDImporte.setText("");
    }

    public void valoresObra() {
        txtTrabajador.setText("");
        txtHoras.setText("0");
        txtCostoxHora.setText("0");
        btnModificarManoObra.setEnabled(false);
        btnEliminarManoObra.setEnabled(false);
        btnAgregarManoObra.setEnabled(true);
        lblIDObraDirecta.setText("");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        panel1 = new java.awt.Panel();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtProducto = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        dateInicio = new com.toedter.calendar.JDateChooser();
        dateExpedicion = new com.toedter.calendar.JDateChooser();
        dateFin = new com.toedter.calendar.JDateChooser();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        txtConcepto = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        txtImporte = new javax.swing.JTextField();
        btnEliminarImporte = new javax.swing.JButton();
        btnModificarImporte = new javax.swing.JButton();
        btnAgregarImporte = new javax.swing.JButton();
        lblIDImporte = new java.awt.Label();
        jPanel5 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txtTrabajador = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        txtCostoxHora = new javax.swing.JTextField();
        btnEliminarManoObra = new javax.swing.JButton();
        btnModificarManoObra = new javax.swing.JButton();
        btnAgregarManoObra = new javax.swing.JButton();
        txtHoras = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        panel2 = new java.awt.Panel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaCostosIndirectos = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaObraDirecta = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaImporte = new javax.swing.JTable();
        panel3 = new java.awt.Panel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaOrdenProduccion = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        lblIDObraDirecta = new javax.swing.JLabel();

        jPanel1.setPreferredSize(new java.awt.Dimension(1280, 680));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Ink Free", 1, 24)); // NOI18N
        jLabel1.setText("Costeo de Ordenes");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 10, -1, -1));

        panel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel2.setText("Fecha de Expedición de la Órden");

        jLabel7.setText("Cliente");

        jLabel3.setText("Producto");

        jLabel8.setText("Fecha de Inicio");

        jLabel9.setText("Fecha de Finalización");

        dateInicio.setDateFormatString("dd/MM/yyyy");

        dateExpedicion.setDateFormatString("dd/MM/yyyy");

        dateFin.setDateFormatString("dd/MM/yyyy");

        javax.swing.GroupLayout panel1Layout = new javax.swing.GroupLayout(panel1);
        panel1.setLayout(panel1Layout);
        panel1Layout.setHorizontalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel1Layout.createSequentialGroup()
                .addContainerGap(115, Short.MAX_VALUE)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateFin, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dateExpedicion, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(109, 109, 109))
        );
        panel1Layout.setVerticalGroup(
            panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addComponent(txtProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dateExpedicion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel7)
                        .addComponent(jLabel8)
                        .addComponent(jLabel9))
                    .addComponent(dateInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(8, Short.MAX_VALUE))
        );

        jPanel1.add(panel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 1240, 70));

        jPanel3.setBackground(new java.awt.Color(204, 204, 204));

        jLabel10.setFont(new java.awt.Font("Ink Free", 1, 12)); // NOI18N
        jLabel10.setText("REGISTRO DE COSTOS DIRECTOS");

        jLabel12.setText("Concepto");

        jLabel13.setText("Importe");

        txtImporte.setText("0");

        btnEliminarImporte.setText("Eliminar");
        btnEliminarImporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarImporteActionPerformed(evt);
            }
        });

        btnModificarImporte.setText("Modificar");
        btnModificarImporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarImporteActionPerformed(evt);
            }
        });

        btnAgregarImporte.setText("Agregar");
        btnAgregarImporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarImporteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtConcepto, javax.swing.GroupLayout.DEFAULT_SIZE, 677, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(btnAgregarImporte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificarImporte)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarImporte)
                        .addGap(16, 16, 16))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(206, 206, 206)
                        .addComponent(lblIDImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(lblIDImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtConcepto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(txtImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminarImporte)
                    .addComponent(btnModificarImporte)
                    .addComponent(btnAgregarImporte))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 130, 1240, 70));

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        jLabel16.setFont(new java.awt.Font("Ink Free", 1, 12)); // NOI18N
        jLabel16.setText("REGISTRO DE MANO DE OBRA DIRECTA");

        jLabel17.setText("Trabajador");

        jLabel18.setText("Total de Horas");

        txtCostoxHora.setText("0");

        btnEliminarManoObra.setText("Eliminar");
        btnEliminarManoObra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarManoObraActionPerformed(evt);
            }
        });

        btnModificarManoObra.setText("Modificar");
        btnModificarManoObra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarManoObraActionPerformed(evt);
            }
        });

        btnAgregarManoObra.setText("Agregar");
        btnAgregarManoObra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarManoObraActionPerformed(evt);
            }
        });

        txtHoras.setText("0");

        jLabel19.setText("Costo /h");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTrabajador)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtHoras, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCostoxHora, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAgregarManoObra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModificarManoObra)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEliminarManoObra)
                        .addGap(16, 16, 16))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTrabajador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(txtCostoxHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminarManoObra)
                    .addComponent(btnModificarManoObra)
                    .addComponent(btnAgregarManoObra)
                    .addComponent(txtHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 210, 1240, 70));

        jTextField1.setBackground(new java.awt.Color(204, 0, 204));
        jTextField1.setFont(new java.awt.Font("Ink Free", 1, 18)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Costos Directos");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTextField2.setBackground(new java.awt.Color(255, 102, 102));
        jTextField2.setFont(new java.awt.Font("Ink Free", 1, 18)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField2.setText("Mano de Obra Directa");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jTextField3.setBackground(new java.awt.Color(153, 153, 255));
        jTextField3.setFont(new java.awt.Font("Ink Free", 1, 18)); // NOI18N
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField3.setText("Costos Indirectos");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        tablaCostosIndirectos.setBackground(new java.awt.Color(204, 204, 255));
        tablaCostosIndirectos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tablaCostosIndirectos);

        tablaObraDirecta.setBackground(new java.awt.Color(255, 204, 204));
        tablaObraDirecta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaObraDirecta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaObraDirectaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaObraDirecta);

        tablaImporte.setBackground(new java.awt.Color(255, 204, 255));
        tablaImporte.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tablaImporte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaImporteMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaImporte);

        javax.swing.GroupLayout panel2Layout = new javax.swing.GroupLayout(panel2);
        panel2.setLayout(panel2Layout);
        panel2Layout.setHorizontalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 393, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 543, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField3, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel2Layout.setVerticalGroup(
            panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jPanel1.add(panel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 1250, 170));

        tablaOrdenProduccion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tablaOrdenProduccion);

        jLabel4.setFont(new java.awt.Font("Ink Free", 1, 18)); // NOI18N
        jLabel4.setText("Costeo de Ordenes");

        jButton4.setText("Guardar Órden de Producción");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panel3Layout = new javax.swing.GroupLayout(panel3);
        panel3.setLayout(panel3Layout);
        panel3Layout.setHorizontalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addContainerGap(580, Short.MAX_VALUE)
                .addGroup(panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel3Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(482, 482, 482))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panel3Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addContainerGap())))
            .addComponent(jScrollPane4)
        );
        panel3Layout.setVerticalGroup(
            panel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jPanel1.add(panel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 460, 1260, 190));
        jPanel1.add(lblIDObraDirecta, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 10, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnModificarImporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarImporteActionPerformed
        int id = Integer.parseInt(lblIDImporte.getText());
        String concepto = txtConcepto.getText();
        double importe = Double.parseDouble(txtImporte.getText());

        Importe imp = new Importe(concepto, importe);

        ConexionDB objetoConexion = new ConexionDB();

        String consulta = String.format("UPDATE costosdirectos SET concepto='%s'," + "importe='%f' WHERE costosdirectos.id=%d", concepto, importe, id);

        try {

            CallableStatement cs = objetoConexion.conectar().prepareCall(consulta);

            cs.execute();
            JOptionPane.showMessageDialog(null, "El registro se ha MODIFICADO correctamente");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
        tablemodeloCostosDirectos();
        valoresImporte();

    }

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {

    }//GEN-LAST:event_btnModificarImporteActionPerformed

    private void btnModificarManoObraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarManoObraActionPerformed
        int id = Integer.parseInt(lblIDObraDirecta.getText());
        String trabajador = txtTrabajador.getText();
        int horas = Integer.parseInt(txtHoras.getText());
        double costoxhora = Double.parseDouble(txtCostoxHora.getText());
        double total = horas * costoxhora;
        ConexionDB objetoConexion = new ConexionDB();
        String consulta = String.format("UPDATE obradirecta SET trabajador='%s'," + "total_horas='%d'," + "costo_por_hora='%f'," + "costo_total='%f' WHERE obradirecta.id=%d", trabajador, horas, costoxhora, total, id);
        try {

            CallableStatement cs = objetoConexion.conectar().prepareCall(consulta);

            cs.execute();
            JOptionPane.showMessageDialog(null, "El registro se ha MODIFICADO correctamente");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
        tablemodeloObra();
        valoresObra();
    }//GEN-LAST:event_btnModificarManoObraActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void btnAgregarImporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarImporteActionPerformed
        String concepto = txtConcepto.getText();
        double importe = Double.parseDouble(txtImporte.getText());
        Importe imp = new Importe(concepto, importe);
        ConexionDB objetoConexion = new ConexionDB();

        String consulta = "insert into costosdirectos (concepto,importe) values (?,?);";
        try {

            CallableStatement cs = objetoConexion.conectar().prepareCall(consulta);
            cs.setString(1, imp.getConcepto());
            cs.setDouble(2, imp.getImporte());
            cs.execute();
            JOptionPane.showMessageDialog(null, "Se ha agregado, el importe con éxito!!!");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
        tablemodeloCostosDirectos();
        txtConcepto.setText("");
        txtImporte.setText("0");

    }//GEN-LAST:event_btnAgregarImporteActionPerformed

    private void tablaImporteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaImporteMouseClicked
        int filaSeleccionada = tablaImporte.getSelectedRow();

        if (filaSeleccionada >= 0) {
            int id = Integer.parseInt(tablaImporte.getValueAt(filaSeleccionada, 0).toString());
            String concepto = tablaImporte.getValueAt(filaSeleccionada, 1).toString();
            String importe = tablaImporte.getValueAt(filaSeleccionada, 2).toString();
            // Actualiza los campos de texto y otros componentes con los valores de la fila seleccionada
            txtConcepto.setText(concepto);
            txtImporte.setText(importe);
            btnModificarImporte.setEnabled(true);
            btnEliminarImporte.setEnabled(true);
            btnAgregarImporte.setEnabled(false);
            lblIDImporte.setText(String.valueOf(id));
            lblIDImporte.setVisible(false);
        }
    }//GEN-LAST:event_tablaImporteMouseClicked

    private void btnEliminarImporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarImporteActionPerformed
        int id = Integer.parseInt(lblIDImporte.getText());
        ConexionDB objetoConexion = new ConexionDB();

        String consulta = String.format("DELETE FROM costosdirectos WHERE costosdirectos.id=%d", id);
        try {

            CallableStatement cs = objetoConexion.conectar().prepareCall(consulta);

            cs.execute();
            JOptionPane.showMessageDialog(null, "El registro se ELIMINADO correctamente");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
        tablemodeloCostosDirectos();
        valoresImporte();
    }//GEN-LAST:event_btnEliminarImporteActionPerformed

    private void btnAgregarManoObraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarManoObraActionPerformed
        String trabajador = txtTrabajador.getText();
        int horasTrabajadas = Integer.parseInt(txtHoras.getText());
        double costoxhora = Double.parseDouble(txtCostoxHora.getText());
        double totalObraDirecta = horasTrabajadas * costoxhora;
        ObraDirecta obd = new ObraDirecta(trabajador, horasTrabajadas, costoxhora, totalObraDirecta);
        ConexionDB objetoConexion = new ConexionDB();

        String consulta = "insert into obradirecta (trabajador,total_horas, costo_por_hora,costo_total) values (?,?,?,?);";
        try {

            CallableStatement cs = objetoConexion.conectar().prepareCall(consulta);
            cs.setString(1, obd.getTrabajador());
            cs.setInt(2, obd.getHorasTrabajadas());
            cs.setDouble(3, obd.getCostoHora());
            cs.setDouble(4, obd.getTotal());
            cs.execute();
            JOptionPane.showMessageDialog(null, "Se ha agregado, el registro con éxito!!!");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
        tablemodeloObra();
        txtTrabajador.setText("");
        txtHoras.setText("0");
        txtCostoxHora.setText("0");
    }//GEN-LAST:event_btnAgregarManoObraActionPerformed

    private void tablaObraDirectaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaObraDirectaMouseClicked
        int filaSeleccionada = tablaObraDirecta.getSelectedRow();

        if (filaSeleccionada >= 0) {
            int id = Integer.parseInt(tablaObraDirecta.getValueAt(filaSeleccionada, 0).toString());
            String trabajador = tablaObraDirecta.getValueAt(filaSeleccionada, 1).toString();
            String horas = tablaObraDirecta.getValueAt(filaSeleccionada, 2).toString();
            String costoxhora = tablaObraDirecta.getValueAt(filaSeleccionada, 3).toString();
            // Actualiza los campos de texto y otros componentes con los valores de la fila seleccionada
            txtTrabajador.setText(trabajador);
            txtHoras.setText(horas);
            txtCostoxHora.setText(costoxhora);
            btnModificarManoObra.setEnabled(true);
            btnEliminarManoObra.setEnabled(true);
            btnAgregarManoObra.setEnabled(false);
            lblIDObraDirecta.setText(String.valueOf(id));
            lblIDObraDirecta.setVisible(false);
        }
    }//GEN-LAST:event_tablaObraDirectaMouseClicked

    private void btnEliminarManoObraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarManoObraActionPerformed
        int id = Integer.parseInt(lblIDObraDirecta.getText());
        ConexionDB objetoConexion = new ConexionDB();

        String consulta = String.format("DELETE FROM obradirecta WHERE obradirecta.id=%d", id);
        try {

            CallableStatement cs = objetoConexion.conectar().prepareCall(consulta);

            cs.execute();
            JOptionPane.showMessageDialog(null, "El registro se ELIMINADO correctamente");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
        tablemodeloObra();
        valoresObra();
    }//GEN-LAST:event_btnEliminarManoObraActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Date fechaExped = dateExpedicion.getDate();
        String Producto = txtProducto.getText();
        String cliente = txtCliente.getText();
        Date fechaInicio = dateInicio.getDate();
        Date fechaFin = dateFin.getDate();
        ConexionDB objetoConexion = new ConexionDB();
        String sql = "";
        double sumaImporte = 0;
        sql = "select importe from costosdirectos;";

        String[] datos = new String[1];

        Statement st;
        try {
            st = objetoConexion.conectar().createStatement();

            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {
                datos[0] = rs.getString(1);
                sumaImporte = sumaImporte + Double.parseDouble(datos[0]);
            }
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
        double sumaManoObra = 0;
        double aux = 0;
        double sumaIndirecto=0;
        sql = "select costo_total from obradirecta;";

        String[] datos1 = new String[1];

        Statement st1;
        try {
            st1 = objetoConexion.conectar().createStatement();

            ResultSet rs1 = st1.executeQuery(sql);

            while (rs1.next()) {
                datos1[0] = rs1.getString(1);
                aux = Double.parseDouble(datos1[0]) * 0.11;
                sumaIndirecto=sumaIndirecto+aux;
                sumaManoObra = sumaManoObra + Double.parseDouble(datos1[0]);
            }
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
        double costoTotal=sumaImporte+sumaManoObra+sumaIndirecto;
        double precioVenta=costoTotal+(costoTotal*0.2);
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        HistorialOrdenProduccion historial=new HistorialOrdenProduccion(fechaExped, Producto, cliente, fechaInicio, fechaFin, sumaImporte, sumaManoObra, sumaIndirecto, costoTotal,precioVenta);
        String consulta = "insert into historialordenproduccion (fechaDeExpedicion,producto,cliente,fechaDeInicio,fechaDeFin,costosDirectos,manoDeObra,costosIndirectos,costoTotal,precioDeVenta) values (?,?,?,?,?,?,?,?,?,?);";
        try {

            CallableStatement cs = objetoConexion.conectar().prepareCall(consulta);
            cs.setString(1, formatter.format(historial.getFechaExpedicion()));
            cs.setString(2, historial.getProducto());
            cs.setString(3, historial.getCliente());
            cs.setString(4, formatter.format(historial.getFechaInicio()));
            cs.setString(5, formatter.format(historial.getFechaFin()));
            cs.setDouble(6, historial.getCostosDirectos());
            cs.setDouble(7, historial.getManoObra());
            cs.setDouble(8, historial.getCostosIndirectos());
            cs.setDouble(9, historial.getCostoTotal());
            cs.setDouble(10,historial.getPrecioVenta());
            cs.execute();
            JOptionPane.showMessageDialog(null, "Se ha agregado, el registro de Orden de Produccion con éxito!!!");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
        tablemodeloOrdenProduccion();
        dateExpedicion.setDate(null);
        txtProducto.setText("");
        txtCliente.setText("");
        dateInicio.setDate(null);
        dateFin.setDate(null);
        
    }//GEN-LAST:event_jButton4ActionPerformed
    public void tablemodeloOrdenProduccion() {
        ConexionDB objetoConexion = new ConexionDB();
        DefaultTableModel modelo = new DefaultTableModel();
        String sql = "";
        modelo.addColumn("id");
        modelo.addColumn("Fecha Expedicion");
        modelo.addColumn("Producto");
        modelo.addColumn("Cliente");
        modelo.addColumn("Fecha Inicio");
        modelo.addColumn("Fecha fin");
        modelo.addColumn("Costos directos");
        modelo.addColumn("Mano de Obra");
        modelo.addColumn("Costos indirectos");
        modelo.addColumn("Costo total");
        modelo.addColumn("Precio de venta");
        tablaOrdenProduccion.setModel(modelo);
        sql = "select id,fechaDeExpedicion,producto,cliente,fechaDeInicio,fechaDeFin,costosDirectos,manoDeObra,costosIndirectos,costoTotal,precioDeVenta from historialordenproduccion;";

        String[] datos = new String[11];

        Statement st;
        try {
            st = objetoConexion.conectar().createStatement();

            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {

                datos[0] = rs.getString(1);
                datos[1] = rs.getString(2);
                datos[2] = rs.getString(3);
                datos[3] = rs.getString(4);
                datos[4] = rs.getString(5);
                datos[5] = rs.getString(6);
                datos[6] = rs.getString(7);
                datos[7] = rs.getString(8);
                datos[8] = rs.getString(9);
                datos[9] = rs.getString(10);
                datos[10] = rs.getString(11);
                modelo.addRow(datos);
            }

            tablaOrdenProduccion.setModel(modelo);
            TableColumnModel columnModel = tablaOrdenProduccion.getColumnModel();
            TableColumn columna = columnModel.getColumn(0);
            TableColumn columna1 = columnModel.getColumn(1);
            columna.setPreferredWidth(25);
            columna1.setPreferredWidth(100);
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
    }
    public void tablemodeloCostosDirectos() {
        ConexionDB objetoConexion = new ConexionDB();
        DefaultTableModel modelo = new DefaultTableModel();
        String sql = "";
        modelo.addColumn("id");
        modelo.addColumn("Concepto");
        modelo.addColumn("Importe");
        tablaImporte.setModel(modelo);
        sql = "select id,concepto,importe from costosdirectos;";

        String[] datos = new String[3];

        Statement st;
        try {
            st = objetoConexion.conectar().createStatement();

            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {

                datos[0] = rs.getString(1);
                datos[1] = rs.getString(2);
                datos[2] = rs.getString(3);
                modelo.addRow(datos);
            }

            tablaImporte.setModel(modelo);
            TableColumnModel columnModel = tablaImporte.getColumnModel();
            TableColumn columna = columnModel.getColumn(0);
            TableColumn columna1 = columnModel.getColumn(1);
            columna.setPreferredWidth(0);
            columna1.setPreferredWidth(0);
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
    }

    public void tablemodeloImportes() {
        ConexionDB objetoConexion = new ConexionDB();
        DefaultTableModel modelo = new DefaultTableModel();
        String sql = "";
        modelo.addColumn("Importe");
        tablaCostosIndirectos.setModel(modelo);
        sql = "select costo_total from obradirecta;";

        String[] datos = new String[1];
        double aux = 0;
        Statement st;
        try {
            st = objetoConexion.conectar().createStatement();

            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {

                datos[0] = rs.getString(1);
                aux = Double.parseDouble(datos[0]) * 0.11;
                datos[0] = String.valueOf(aux);
                modelo.addRow(datos);
                aux = 0;
            }

            tablaCostosIndirectos.setModel(modelo);
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
    }

    public void tablemodeloObra() {
        ConexionDB objetoConexion = new ConexionDB();
        DefaultTableModel modelo = new DefaultTableModel();
        String sql = "";
        modelo.addColumn("id");
        modelo.addColumn("Trabajador");
        modelo.addColumn("Horas");
        modelo.addColumn("Costo por hora");
        modelo.addColumn("Total");
        tablaObraDirecta.setModel(modelo);
        sql = "select id,trabajador,total_horas,costo_por_hora,costo_total from obradirecta;";

        String[] datos = new String[5];

        Statement st;
        try {
            st = objetoConexion.conectar().createStatement();

            ResultSet rs = st.executeQuery(sql);

            while (rs.next()) {

                datos[0] = rs.getString(1);
                datos[1] = rs.getString(2);
                datos[2] = rs.getString(3);
                datos[3] = rs.getString(4);
                datos[4] = rs.getString(5);
                modelo.addRow(datos);
            }

            tablaObraDirecta.setModel(modelo);
            TableColumnModel columnModel = tablaObraDirecta.getColumnModel();
            TableColumn columna = columnModel.getColumn(0);
            TableColumn columna1 = columnModel.getColumn(1);
            columna.setPreferredWidth(0);
            columna1.setPreferredWidth(0);
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Error:" + e.toString());
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarImporte;
    private javax.swing.JButton btnAgregarManoObra;
    private javax.swing.JButton btnEliminarImporte;
    private javax.swing.JButton btnEliminarManoObra;
    private javax.swing.JButton btnModificarImporte;
    private javax.swing.JButton btnModificarManoObra;
    private com.toedter.calendar.JDateChooser dateExpedicion;
    private com.toedter.calendar.JDateChooser dateFin;
    private com.toedter.calendar.JDateChooser dateInicio;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private java.awt.Label lblIDImporte;
    private javax.swing.JLabel lblIDObraDirecta;
    private java.awt.Panel panel1;
    private java.awt.Panel panel2;
    private java.awt.Panel panel3;
    private javax.swing.JTable tablaCostosIndirectos;
    private javax.swing.JTable tablaImporte;
    private javax.swing.JTable tablaObraDirecta;
    private javax.swing.JTable tablaOrdenProduccion;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtConcepto;
    private javax.swing.JTextField txtCostoxHora;
    private javax.swing.JTextField txtHoras;
    private javax.swing.JTextField txtImporte;
    private javax.swing.JTextField txtProducto;
    private javax.swing.JTextField txtTrabajador;
    // End of variables declaration//GEN-END:variables
}
